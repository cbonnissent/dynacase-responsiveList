{"version":3,"file":"main-built.js","sources":["RESPONSIVE_LIST/JS/models/document.js","RESPONSIVE_LIST/JS/collections/document.js","RESPONSIVE_LIST/JS/models/search.js","RESPONSIVE_LIST/JS/collections/search.js","RESPONSIVE_LIST/JS/collections/openDocument.js","RESPONSIVE_LIST/JS/views/search.js","RESPONSIVE_LIST/JS/views/searches.js","RESPONSIVE_LIST/JS/views/openDocumentListElement.js","RESPONSIVE_LIST/JS/hammer.js","RESPONSIVE_LIST/JS/views/documentWidget.js","RESPONSIVE_LIST/JS/views/openDocument.js","RESPONSIVE_LIST/JS/main.js"],"names":[],"mappings":"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","sourcesContent":["define('rsp/models/document',[\n    \"underscore\",\n    \"backbone\"\n], function (_)\n{\n    \"use strict\";\n\n    return Backbone.Model.extend({\n\n        idAttribute: \"initid\",\n\n        defaults: {\n            state: null,\n            viewId : \"!defaultConsultation\",\n            \"title\" : \"Chargement...\",\n            \"icon\" : false,\n            \"dateSelected\" : 0\n        },\n\n        initialize : function () {\n            this.set(\"dateSelected\", Date.now());\n        },\n\n        isNew: function ()\n        {\n            return true;\n        },\n\n        parse: function (response)\n        {\n            var values = response.properties;\n            values.attributes = response.attributes;\n            return values;\n        }\n    });\n});\n","define('rsp/collections/document',[\n    \"underscore\",\n    \"rsp/models/document\",\n    \"backbone\"\n], function (_, model)\n{\n    \"use strict\";\n\n    var urlTemplate = _.template(\"<%= urlBase %>?slice=<%= slice %>&offset=<%= offset %>&keyword=<%= keyWord %>&fields=document.properties.all,document.attributes\");\n\n    return Backbone.Collection.extend({\n        \"model\": model,\n\n        url: function dc_url()\n        {\n            return urlTemplate(this);\n        },\n\n        initialize: function dc_initialize(values, options)\n        {\n            if (!options.url) {\n                throw new Error(\"the document model needs an url conf\");\n            }\n            this.urlBase = options.url;\n            this.slice = 10;\n            this.offset = 0;\n            this.keyWord = \"\";\n        },\n\n        parse: function dc_parse(response)\n        {\n            this.nbResult = response.data.resultMax;\n            return response.data.documents;\n        },\n\n        reset : function dc_reset() {\n            this.nbResult = null;\n            this.slice = 10;\n            this.offset = 0;\n            return Backbone.Collection.prototype.reset.apply(this, arguments);\n        }\n\n    });\n});\n","define('rsp/models/search',[\n    \"underscore\",\n    \"rsp/collections/document\",\n    \"backbone\"\n], function (_, CollectionDocument)\n{\n    \"use strict\";\n\n    return Backbone.Model.extend({\n\n        idAttribute: \"initid\",\n\n        initialize: function rsp_init()\n        {\n            this.listenTo(this, \"selected\", this.prepareDocumentList);\n            this.set(\"associatedDocumentList\", new CollectionDocument([], {\n                \"url\": window.location.pathname + \"api/v1/rspl/listDocument/\" + this.id\n            }));\n            this.collectionInitialized = false;\n            this.listenTo(this.get(\"associatedDocumentList\"), \"add\", this.propagateAdd);\n            this.listenTo(this.get(\"associatedDocumentList\"), \"reset\", this.propagateReset);\n            this.listenTo(this.get(\"associatedDocumentList\"), \"sync\", this.propagateSync);\n        },\n\n        parse: function (response)\n        {\n            return response.properties;\n        },\n\n        prepareDocumentList: function ()\n        {\n            if (!this.collectionInitialized) {\n                this.get(\"associatedDocumentList\").fetch();\n            }\n        },\n\n        propagateAdd: function propagateAdd(currentDocument)\n        {\n            this.trigger(\"addDocumentList\", this, this.get(\"associatedDocumentList\"), currentDocument);\n        },\n\n        propagateReset: function propagateReset()\n        {\n            this.trigger(\"resetDocumentList\", this, this.get(\"associatedDocumentList\"));\n        },\n\n        propagateSync: function propagateSync()\n        {\n            this.trigger(\"syncDocumentList\", this, this.get(\"associatedDocumentList\"));\n        }\n    });\n});\n","define('rsp/collections/search',[\n    \"underscore\",\n    \"rsp/models/search\",\n    \"backbone\"\n], function (_, model)\n{\n    \"use strict\";\n\n    return Backbone.Collection.extend({\n        \"url\" : window.location.pathname + \"api/v1/rspl/listDocument/DIR_RESPONSIVE_LIST\",\n        \"model\": model,\n\n        parse : function searchCollection_parse(response) {\n            return response.data.documents;\n        }\n    });\n});\n","define('rsp/collections/openDocument',[\n    \"underscore\",\n    \"rsp/models/document\",\n    \"backbone\"\n], function (_, model)\n{\n\n    \"use strict\";\n\n    return Backbone.Collection.extend({\n        \"model\": model,\n\n        comparator : \"dataSelected\",\n\n\n        initialize : function odc__initialize() {\n            this.listenTo(this, \"selected\", this.propagateSelected);\n            this.listenTo(this, \"selectPrevious\", this.selectPrevious);\n            this.listenTo(this, \"selectNext\", this.selectNext);\n            this.listenTo(this, \"destroy\", this.selectAnotherOne);\n        },\n\n        propagateSelected : function odc__selected(model, isHidden) {\n            this.each(function odc__isSelected(currentModel) {\n                currentModel.set(\"selected\", model.id === currentModel.id);\n                if (model.id === currentModel.id && isHidden) {\n                    currentModel.set(\"dateSelected\", Date.now());\n                }\n            });\n            this.trigger(\"orderChanged\");\n            this.sort();\n        },\n\n        selectPrevious : function odc__selectPrevious(model) {\n            var list = this.sortBy(function odc_comparator(model1)\n            {\n                return -model1.get(\"dateSelected\");\n            });\n            this.propagateSelected(list[_.indexOf(list, model) - 1]);\n        },\n\n        selectNext: function odc__selectNext(model)\n        {\n            var list = this.sortBy(function odc_comparator(model1)\n            {\n                return -model1.get(\"dateSelected\");\n            });\n            this.propagateSelected(list[_.indexOf(list, model) + 1]);\n        },\n\n        selectAnotherOne : function odc_selectAnotherOne(model, collection, options) {\n            var newModel = this.at(options.index) || this.at(options.index - 1);\n            if (model.get(\"selected\")) {\n                if (newModel) {\n                    newModel.trigger(\"selected\", newModel);\n                }\n            }\n            if (this.length === 0) {\n                window.document.title = \"Les documents\";\n            }\n        }\n    });\n});\n","\ndefine('rsp/views/search',[\n    \"underscore\",\n    \"backbone\"\n], function (_)\n{\n    \"use strict\";\n\n    return Backbone.View.extend({\n\n        tagName: \"option\",\n\n        render: function searchView()\n        {\n            this.$el.data(\"searchId\", this.model.id).attr(\"value\", this.model.id).addClass(\"searchElement\").text(this.model.get(\"title\"));\n            return this;\n        }\n\n    });\n});\n","define('rsp/views/searches',[\n    \"underscore\",\n    \"rsp/views/search\",\n    \"backbone\"\n], function (_, SearchView)\n{\n\n    \"use strict\";\n\n    var template = _.template('<select class=\"form-control documentsList__searchList__select\"></select>');\n\n    return Backbone.View.extend({\n\n        tagName: \"form\",\n\n        events: {\n            \"change\": \"displayDocumentList\"\n        },\n\n        initialize: function searches_initialize(options)\n        {\n            if (!options.collection) {\n                throw new Error(\"You need to associate the searches view with a collection\");\n            }\n            this.collection = options.collection;\n            this.listenTo(this.collection, 'add', this._addOne);\n            this.listenTo(this.collection, 'reset', this.render);\n            this.listenTo(this.collection, 'sync', this.displayDocumentList);\n        },\n\n        render: function searches_render()\n        {\n            this.$el.empty().append(template());\n            this._addAll();\n            return this;\n        },\n\n        _addAll: function ()\n        {\n            this.collection.each(this._addOne);\n        },\n\n        _addOne: function (model)\n        {\n            var searchView = new SearchView({model: model});\n            this.$el.find(\".documentsList__searchList__select\").append(searchView.render().$el);\n        },\n\n        displayDocumentList: function ()\n        {\n            var currentSearch = this.$el.find(\".documentsList__searchList__select\").val(), documentModel = this.collection.get(currentSearch);\n            if (documentModel) {\n                documentModel.trigger(\"selected\", documentModel);\n            }\n        }\n    });\n});\n","define('rsp/views/openDocumentListElement',[\n    \"underscore\",\n    \"backbone\"\n], function (_)\n{\n\n    \"use strict\";\n\n    var template = _.template('<a class=\"documentTab\" href=\"?app=DOCUMENT&id=<%- initid %>\" data-id=\"<%- initid %>\" data-title=\"<%- title %>\">' +\n    '<span class=\"documentTab__text\">' +\n    '  <% if (icon) { %><img src=\"<%- icon %>\" class=\"img-circle documentElement__icon\" /> <% } %> <%- title %>' +\n    '</span>' +\n    '<button type=\"button\" class=\"close documentTab__remove\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>' +\n    '</a>');\n\n    return Backbone.View.extend({\n\n        tagName : \"li\",\n        className : \"openDocuments__tab\",\n\n        events : {\n            \"click\" : \"selected\",\n            \"click .documentTab__remove\" : \"remove\"\n        },\n\n        initialize : function opde_initialize() {\n            this.listenTo(this.model, \"change\", this.render);\n            this.listenTo(this.model, \"change:selected\", this.indicateSelected);\n            this.listenTo(this.model, \"destroy\", this.delete);\n        },\n\n        render : function opde__render(options) {\n            options = options || {};\n            this.$el.empty().append(template(this.model.toJSON()));\n            this.$el.attr(\"title\", this.model.get(\"title\"));\n            if (options.hidden) {\n                this.$el.addClass(\"documentTab__hidden clearfix\");\n            }\n            this.indicateSelected();\n            return this;\n        },\n\n        selected : function opde_selected(event) {\n            event.preventDefault();\n            this.model.trigger(\"selected\", this.model, this.$el.is(\".documentTab__hidden\"));\n        },\n\n        indicateSelected : function opde__indicateSelected() {\n            if (this.model.get(\"selected\")) {\n                this.$el.addClass(\"active\");\n            } else {\n                this.$el.removeClass(\"active\");\n            }\n        },\n\n        remove : function opde__remove() {\n            this.model.destroy();\n        },\n\n        \"delete\" : function opde_delete() {\n            this.$el.remove();\n        }\n\n    });\n});\n","/*! Hammer.JS - v2.0.4 - 2014-09-28\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2014 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge]\n * @returns {Object} dest\n */\nfunction extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nfunction merge(dest, src) {\n    return extend(dest, src, true);\n}\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        extend(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument;\n    return (doc.defaultView || doc.parentWindow);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = last.deltaX - input.deltaX;\n        var deltaY = last.deltaY - input.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.allow = true; // used by Input.TouchMouse to disable mouse events\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down, and mouse events are allowed (see the TouchMouse input)\n        if (!this.pressed || !this.allow) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        // when we're in a touch event, so  block all upcoming mouse events\n        // most mobile browser also emit mouseevents, right after touchstart\n        if (isTouch) {\n            this.mouse.allow = false;\n        } else if (isMouse && !this.mouse.allow) {\n            return;\n        }\n\n        // reset the allowMouse when we're done\n        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {\n            this.mouse.allow = true;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        // not needed with native support for the touchAction property\n        if (NATIVE_TOUCH_ACTION) {\n            return;\n        }\n\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE);\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // pan-x and pan-y can be combined\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.id = uniqueId();\n\n    this.manager = null;\n    this.options = merge(options || {}, this.defaults);\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        extend(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(withState) {\n            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(true);\n        }\n\n        emit(); // simple 'eventName' events\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(true);\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = extend({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        this._super.emit.call(this, input);\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            this.manager.emit(this.options.event + inOut, input);\n        }\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 500, // minimal time of the pointer to be pressed\n        threshold: 5 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.65,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.velocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.velocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.velocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.direction &&\n            input.distance > this.options.threshold &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.direction);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 2, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED ) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create an manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.4';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, { enable: false }],\n        [PinchRecognizer, { enable: false }, ['rotate']],\n        [SwipeRecognizer,{ direction: DIRECTION_HORIZONTAL }],\n        [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    options = options || {};\n\n    this.options = merge(options, Hammer.defaults);\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        extend(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        var recognizers = this.recognizers;\n        recognizer = this.get(recognizer);\n        recognizers.splice(inArray(recognizers, recognizer), 1);\n\n        this.touchAction.update();\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    each(manager.options.cssProps, function(value, name) {\n        element.style[prefixed(element.style, name)] = add ? value : '';\n    });\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nextend(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\nif (typeof define == TYPE_FUNCTION && define.amd) {\n    define('rsp/hammer',[],function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n","define('rsp/views/documentWidget',[\n    \"jquery\",\n    \"underscore\",\n    \"rsp/hammer\",\n    \"dcpDocument/document\",\n    \"backbone\"\n], function ($, _, Hammer)\n{\n\n    \"use strict\";\n\n    return Backbone.View.extend({\n\n        className: \"documentsWrapper__div\",\n\n        initialize: function opde_initialize()\n        {\n            //this.listenTo(this.model, \"change:initid\", this.render);\n            this.listenTo(this.model, \"change:selected\", this.indicateSelected);\n            this.listenTo(this.model, \"change:title\", this.indicateSelected);\n            this.listenTo(this.model, \"change\", this.setFrameName);\n            this.listenTo(this.model, \"destroy\", this.delete);\n            $(window).on(\"resize\", _.debounce(_.bind(this._resize, this), 100));\n        },\n\n        render: function dw_render()\n        {\n            var currentView = this, afterLoaded = _.bind(this.indicateSelected, this);\n            this.$el.document(\"fetchDocument\", {\n                \"initid\": this.model.id,\n                \"viewId\": this.model.get(\"viewId\"),\n                withoutResize: true\n            });\n            this.$el.document(\"addEvent\", \"ready\", function (event, document)\n            {\n                currentView.model.set(document);\n                currentView.model.set(\"attributes\", this.documentController(\"getValues\"));\n                if (!document.name || document.name !== \"VOID_DOCUMENT\") {\n                    currentView.model.trigger(\"reloadDocument\", currentView.model.toJSON());\n                }\n                $(this).find(\"header\").hide();\n                afterLoaded();\n            });\n            this.$el.document(\"addEvent\", \"beforeClose\", function (event, document, newDocument)\n            {\n                var currentDocument = currentView.model.collection.get(newDocument.initid);\n                if (parseInt(newDocument.initid, 10) === parseInt(currentView.model.get(\"initid\"), 10)) {\n                    currentDocument.trigger(\"selected\", currentDocument);\n                    return;\n                }\n                event.preventDefault();\n                if (currentDocument) {\n                    currentDocument.trigger(\"selected\", currentDocument);\n                } else {\n                    currentView.model.collection.add({initid: newDocument.initid, title: \"Chargement\"});\n                }\n            });\n            this.$el.document(\"addEvent\", \"afterSave\", function (event, document, oldDocument)\n            {\n                // if oldDocument.id => 0 afterCreation save\n                if (oldDocument.id === 0) {\n                    currentView.model.trigger(\"reloadDocumentList\");\n                }\n            });\n            this.$el.document(\"addEvent\", \"afterDelete\", function (event, document, oldDocument)\n            {\n                currentView.model.trigger(\"removeDocument\", document);\n            });\n            this.setFrameName();\n            this.setSwipeEvent();\n            return this;\n        },\n\n        indicateSelected: function opde__indicateSelected()\n        {\n            if (this.model.get(\"selected\")) {\n                this.$el.show();\n                window.document.title = this.model.get(\"title\");\n                window.documentSelected = this.$el;\n                this._resize();\n            } else {\n                this.$el.hide();\n            }\n        },\n\n        _resize: function opde_resize()\n        {\n            var currentView = this, getTop = function (element)\n            {\n                element = element[0];\n                return element.getBoundingClientRect().top + 5;\n            };\n            if (this.$el.is(\":visible\")) {\n                this.$el.find(\"iframe\").height($(window).innerHeight() - getTop(this.$el)).width(this.$el.innerWidth() - 1);\n                _.defer(function secondHeightResize()\n                {\n                    currentView.$el.find(\"iframe\").height($(window).innerHeight() - getTop(currentView.$el));\n                }, 50);\n            }\n        },\n\n        \"delete\": function opde_delete()\n        {\n            this.$el.remove();\n        },\n\n        setFrameName: function opde_setFrameName()\n        {\n            var name = \"document_\" + this.model.get(\"initid\") + \"_\" + this.model.get(\"title\");\n            this.$el.find(\"iframe\").attr(\"name\", name);\n        },\n\n        setSwipeEvent: function opde_setSwipeEvent()\n        {\n            var iframe = this.$el.find(\"iframe\"), currentView = this, addHammer = _.bind(function addHammer()\n            {\n                var iframeBody = this.contentWindow.document.body;\n                iframeBody.style.position = \"absolute\";\n                iframeBody.style.top = 0;\n                iframeBody.style.left = 0;\n                iframeBody.style.right = 0;\n                iframeBody.style.bottom = 0;\n                Hammer(iframeBody).on(\"swipeleft\", function (event)\n                {\n                    currentView.model.collection.trigger(\"selectNext\", currentView.model);\n                });\n                Hammer(iframeBody).on(\"swiperight\", function (event)\n                {\n                    currentView.model.collection.trigger(\"selectPrevious\", currentView.model);\n                });\n            }, iframe[0]);\n            iframe.on(\"load\", addHammer);\n            addHammer();\n        }\n\n    });\n});\n","define('rsp/views/openDocument',[\n    \"jquery\",\n    \"underscore\",\n    \"rsp/views/openDocumentListElement\",\n    \"rsp/views/documentWidget\",\n    \"backbone\",\n    \"bootstrap\"\n], function ($, _, ViewOpenDocumentListElement, ViewDocumentWidget)\n{\n\n    \"use strict\";\n\n    var template = {\n        \"global\": _.template('<ul class=\"nav nav-tabs documentList\">' +\n        '   <li class=\"openDocuments__openDocumentCloseAll pull-right\" title=\"Fermer tous les documents\">' +\n        '       <button type=\"button\" class=\"btn btn-link\"> ' +\n        '           <span class=\"fa fa-times-circle-o\"></span>' +\n        '       </button>' +\n        '   </li>' +\n        '   <li class=\"openDocuments__more pull-right\" style=\"visibility: hidden;\">' +\n        '       <div class=\"btn-group\" title=\"Plus de documents\">' +\n        '           <button type=\"button\" class=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">' +\n        '               <span class=\"fa fa-bars\"></span>' +\n        '               +<span class=\"openDocuments__more__number\"></span> <span class=\"caret\"></span>' +\n        '           </button>' +\n        '           <ul class=\"dropdown-menu pull-right openDocuments__more__documents\" role=\"menu\">' +\n        '           </ul>' +\n        '       </div>' +\n        '   </li>' +\n        '   <li class=\"openDocuments__openDocumentList visible-xs visible-sm\">' +\n        '       <button type=\"button\" class=\"btn btn-link\">' +\n        '           <span class=\"fa fa-2x fa-bars\"></span>' +\n        '       </button>' +\n        '   </li>' +\n        '   <li class=\"openDocuments__createDocument\">' +\n        '       <div class=\"btn-group\" title=\"Créer un document\">' +\n        '           <button type=\"button\" class=\"btn btn-success dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">' +\n        '               <span class=\"glyphicon glyphicon-plus-sign\"></span>' +\n        '               Nouveau <span class=\"caret\"></span>' +\n        '           </button>' +\n        '           <ul class=\"dropdown-menu openDocuments__createDocument__families\" role=\"menu\">' +\n        '           </ul>' +\n        '       </div>' +\n        '   </li>' +\n        '</ul><div class=\"documentsWrapper\"></div>'),\n        \"families\": _.template('<% _.each(families, function(currentFamily) { %>' +\n        '   <li>' +\n        '       <a class=\"openDocuments__createDocument__familyElement\" href=\"#<%- currentFamily.initid %>\" data-initid=\"<%- currentFamily.initid %>\">' +\n        '          <img src=\"<%- currentFamily.icon %>\" class=\"img-circle documentElement__icon\"><%- currentFamily.title %>' +\n        '      </a>' +\n        '    </li>' +\n        ' <% }); %>')\n    };\n\n    return Backbone.View.extend({\n\n        events: {\n            \"click .openDocuments__openDocumentList\": \"switchSide\",\n            \"click .openDocuments__createDocument__familyElement\": \"openCreation\",\n            \"click .openDocuments__openDocumentCloseAll\": \"closeAll\"\n        },\n\n        initialize: function opd_initialize(options)\n        {\n            if (!options.openDocuments) {\n                throw new Error(\"You need an openDocuments collection\");\n            }\n            this.openDocuments = options.openDocuments;\n            this.listenTo(this.openDocuments, \"add\", this._addDocument);\n            this.listenTo(this.openDocuments, \"selected\", this.openDocumentIHM);\n            this.listenTo(this.openDocuments, \"orderChanged\", this.renderOpenDocument);\n            this.listenTo(this.openDocuments, \"destroy\", this.renderOpenDocument);\n            this.nbMaxOpen = 0;\n            this.isReady = false;\n            $(window).on(\"resize\", _.debounce(_.bind(this._resize, this), 200));\n        },\n\n        render: function opd_render()\n        {\n            this.$el.append(template.global());\n            if (window.dcp.creatable_family.length === 0) {\n                this.$el.find(\".openDocuments__createDocument\").remove();\n            } else {\n                this.$el.find(\".openDocuments__createDocument__families\").append(template.families({families: window.dcp.creatable_family}));\n            }\n            this.isReady = true;\n            this.addPreload();\n            return this;\n        },\n\n        addPreload: function opd_addPreload()\n        {\n            var $preload = $('<div class=\"documentPreload\" style=\"display : none;\"></div>');\n            this.$el.find(\".documentsWrapper\").append($preload);\n            $preload.document({\"initid\": \"VOID_DOCUMENT\"});\n        },\n\n        switchSide: function opd_switchSide()\n        {\n            this.trigger(\"switchSide\");\n        },\n\n        openDocumentIHM: function opd_openDocumentIHM()\n        {\n            this.trigger(\"openDocumentIHM\");\n        },\n\n        openCreation: function opd_openCreation(event)\n        {\n            var $target = $(event.currentTarget);\n            event.preventDefault();\n            this.openDocuments.add({\"initid\": $target.data(\"initid\"), \"viewId\": \"!coreCreation\"});\n        },\n\n        _addDocument: function opd_addDocument(model)\n        {\n            var preload, viewDocument;\n            this.renderOpenDocument();\n            preload = this.$el.find(\".documentPreload\");\n            preload.removeClass(\"documentPreload\");\n            viewDocument = new ViewDocumentWidget({model: model, el: preload});\n            viewDocument.render();\n            model.trigger(\"selected\", model);\n            this.addPreload();\n            viewDocument._resize();\n        },\n\n        renderOpenDocument: function opd_renderOpenDocument()\n        {\n            var nb = 0, nbTotal = this.nbMaxOpen,\n                $targetVisible = this.$el.find(\".documentList\"),\n                $targetOther = this.$(\".openDocuments__more__documents\");\n            $targetVisible.find(\".openDocuments__tab\").remove();\n            $targetOther.empty();\n            _.each(this.openDocuments.sortBy(function odc_comparator(model1)\n            {\n                return -model1.get(\"dateSelected\");\n            }), function (model)\n            {\n                var viewList = new ViewOpenDocumentListElement({model: model});\n                if (nb < nbTotal) {\n                    $targetVisible.append(viewList.render().$el);\n                } else {\n                    $targetOther.append(viewList.render({hidden : true}).$el);\n                }\n                nb += 1;\n            });\n            if (nb !== 0 && nb > nbTotal) {\n                this.$(\".openDocuments__more\").css(\"visibility\", \"visible\");\n                this.$(\".openDocuments__more__number\").text(nb - nbTotal);\n            } else {\n                this.$(\".openDocuments__more\").css(\"visibility\", \"hidden\");\n            }\n        },\n\n        closeAll: function opd_closeAll()\n        {\n            var model;\n            while (model = this.openDocuments.first()) { // jshint ignore:line\n                model.destroy();\n            }\n        },\n\n        _resize: function opd_resize()\n        {\n            var oldMax = this.nbMaxOpen;\n            //compute space between openDocuments__createDocument and openDocuments__more\n            if (this.isReady) {\n                this.nbMaxOpen = Math.floor((this._getBorder(this.$el.find(\".openDocuments__more\"), \"left\") - this._getBorder(this.$el.find(\".openDocuments__createDocument\"), \"right\") - 10) / 202);\n                if (oldMax !== this.nbMaxOpen) {\n                    this.renderOpenDocument();\n                }\n            }\n        },\n\n        _getBorder: function opd_getBorder(element, position)\n        {\n            element = element[0];\n            return element.getBoundingClientRect()[position];\n\n        }\n\n    });\n});\n\n","/**\n * Created by charles on 10/03/15.\n */\nrequire([\"jquery\",\n    \"underscore\",\n    \"rsp/collections/search\",\n    \"rsp/collections/openDocument\",\n    \"rsp/views/searches\",\n    \"rsp/views/documentList\",\n    \"rsp/views/openDocument\",\n    \"dcpDocument/document\"], function rsp_require($, _, CollectionSearch, CollectionOpenDocument,\n                                                  ViewSearches, ViewDocumentList, ViewOpenDocument)\n{\n\n    \"use strict\";\n\n    var toogleLittleMode = function() {\n        $(\".documentsList\").toggleClass(\"hiddenLittle\");\n        $(\".openDocuments\").toggleClass(\"hiddenLittle\");\n        $(window).trigger(\"resize\");\n    };\n\n    if (!window.dcp.search_list || window.dcp.search_list.length === 0) {\n        $(\".loading--initial\").hide();\n        $(\".error__wrapper\").show();\n        return;\n    }\n\n    window.dcp = window.dcp || {};\n\n    window.dcp.collections = window.dcp.collections || {};\n    window.dcp.views = window.dcp.views || {};\n\n    window.dcp.collections.searches = new CollectionSearch();\n    window.dcp.collections.openDocuments = new CollectionOpenDocument();\n\n    $(document).ready(function rsp_ready()\n    {\n\n        window.dcp.views.searches = new ViewSearches({\n            el: $(\".documentsList__searchList\"),\n            collection: window.dcp.collections.searches\n        });\n        window.dcp.views.searches.render();\n        window.dcp.views.documentList = new ViewDocumentList({\n            el: $(\".documentsList__documents\"),\n            collection: window.dcp.collections.searches,\n            openDocuments : window.dcp.collections.openDocuments\n        });\n        window.dcp.views.openDocument = new ViewOpenDocument({\n            el: $(\".openDocuments\"),\n            openDocuments: window.dcp.collections.openDocuments\n        });\n        window.dcp.views.openDocument.listenTo(window.dcp.views.openDocument, \"switchSide\", function() {\n            toogleLittleMode();\n        });\n        window.dcp.views.openDocument.listenTo(window.dcp.views.openDocument, \"openDocumentIHM\", function ()\n        {\n            $(\".documentsList\").addClass(\"hiddenLittle\");\n            $(\".openDocuments\").removeClass(\"hiddenLittle\");\n            $(window).trigger(\"resize\");\n        });\n        window.dcp.collections.openDocuments.listenTo(window.dcp.collections.openDocuments, \"reloadDocumentList\", function ()\n        {\n            window.dcp.views.documentList.trigger(\"reloadDocumentList\");\n        });\n        window.dcp.collections.openDocuments.listenTo(window.dcp.collections.openDocuments, \"reloadDocument\", function (currentDocument)\n        {\n            window.dcp.views.documentList.trigger(\"reloadDocument\", currentDocument);\n        });\n        window.dcp.collections.openDocuments.listenTo(window.dcp.collections.openDocuments, \"removeDocument\", function (currentDocument)\n        {\n            window.dcp.views.documentList.trigger(\"removeDocument\", currentDocument);\n        });\n        $(\".documentList__switch\").on(\"click\", function() {\n            toogleLittleMode();\n        });\n        $(\".unlog--button\").on(\"click\", function() {\n           $(\"#disconnect\").submit();\n        });\n        window.dcp.views.openDocument.render();\n        window.dcp.views.documentList.render();\n        window.dcp.collections.searches.add(window.dcp.search_list);\n        window.dcp.views.searches.displayDocumentList();\n\n\n        $(\".loading--initial\").hide();\n        $(\".content\").show();\n        $(window).trigger(\"resize\");\n    });\n});\ndefine(\"RESPONSIVE_LIST/JS/main\", function(){});\n\n"]}